
use L2H;

#------------------------------------------------------------------------------
# Variable:	%symbol
# Description:	
#
my %symbol = 
  ( '32'  => ' ',
    '"20' => ' ',
    '"5B' => '[',
    '"5C' => '&#092;',
    '"5D' => ']',
    '"5E' => '&#094;',
    '"7B' => '&#123;',
    '"7D' => '&#125;',
  );


newcommand('InputIfFileExists',
	   arity => 3,
	   text => sub {
	     my $file = $_[1];
	     my $dir  = "src/".$L2H::Macro{'CURRENTDIR'}[2]; # TODO
	     $file    = "$dir/$file";
	     die ("file not found: $file\n") if not -e $file;
	     if (-e $file) {
	       my $fd = new FileHandle($file, 'r') || die "$file: $!\n";
	       local $/ = undef;
	       local $_ = <$fd>;
	       $fd-> close();
	       return $_[2].$_;
	     }
	     return $_[3];});

newcommand('ptt',     text => '\\tt');
newcommand('psf',     text => '\\sf');
newcommand('pdollar', text => '\\$');#'
newcommand('undefined');
newcommand('usepackage',
	   arity => '[]1',
	   text	 => sub {
	     my $self = shift;
	     my $p;
	     foreach $p (split ',',$_[1]) {
	       # TODO: pass optional argument to package
	       $self->load("$p.lh", 1);;
	     }
	     return '';
	   });
newcommand('rm');
newcommand('thepage');
newcommand('leftmark');
newcommand('rightmark');
newcommand('ignorespaces');
newcommand('makeindex');
newcommand('hline');
newcommand('chaptername');
newcommand('obeyspaces');
newcommand('obeylines');
newcommand('thesection');
newcommand('textwidth');
newcommand('z@');
newcommand('c@secnumdepth');
newcommand('newfont',arity => 2);

newcommand('DeclareFontShape',arity=>5);
newcommand('DeclareRobustCommand',arity=>2);

#newcommand('@author',			text => '');
#newcommand('@title',			text => '');

newcommand(' ',			text => ' ');
newcommand("\t",		text => ' ');
newcommand("\n",		text => ' ');
newcommand('#'	,		text => '#');
newcommand('!',			text => '');
newcommand('(',			text => '<i>', 		context => 'math');
newcommand(')',			text => '</i>',		context => '/');

newcommand('@',
	   text => '@');
newcommand('BibTeX',
	   text => '<span class="sc">Bib</span>\-<span class="t">T</span><span class="e">e</span>X');
newcommand('LaTeX',
	   text => 'L<span class="a">a</span>T<span class="e">e</span>X');
newcommand('LaTeXTeX',
	   text => '(L<span class="a">a</span>)T<span class="e">e</span>X');
newcommand('LaTeXe',
	   text => 'L<span class="a">a</span>T<span class="e">e</span>X2&epsilon;');
newcommand('huge',
	   text => sub{ return shift->in_group('<font size="7">',
					       '</font>'); });
newcommand('Huge',
	   text => sub{ return shift->in_group('<font size="7">',
					       '</font>'); });
newcommand('Large',
	   text => sub{ return shift->in_group( '<font size="5">',
						'</font>'); });
newcommand('LARGE',
	   text => sub{ return shift->in_group('<font size="6">',
					       '</font>'); });
newcommand('P',
	   text => '§');
newcommand('[',
	   text => '[');
newcommand('\\',
	   arity => '[]0',
	   text => sub
	   { my $self = shift;
	     return '</td></tr><tr><td>' if $self->{'context'} eq 'tabular';
	     return '<br />';
	   });
newcommand(']',
	   text => ']');

newcommand('addtolength',
	   arity => 2);
newcommand('appendix');
newcommand('author',
	   arity => 1,
	   text => sub
	   { my ($self,$author) = @_;
	     renewcommand('@author', 'text' => $author);
	     if ( $self->opt('author') eq '' )
	     { my $trans = new L2H();
	       set_opt('author',$trans->LaTeX2HTML($author));
	     }
	     return '';
	   });
newcommand('backslash',
	   text => '&#092;');
newcommand('bf',
	   text => sub{ return shift->in_group('<b>', '</b>'); });
newcommand('bibitem',
	   arity => '[]1',
	   text => sub{
	     my $self  = shift;
	     my $label = shift;
	     my $key   = shift;
	     $self->{"cite:$key"} = $label; 
	     return "<dt><a name='$key'>[$label]<dd>";
	   });
newcommand('bibliography',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     return $self->section($self->opt('prefix').'&#095;bib'.$self->opt('ext'),
				   'bibliography',
				   '\\bibliographyname',
				   $self->{BIB});
	   });
newcommand('bibliographyname',
	   text => 'Bibliography');
newcommand('bibliographystyle',
	   arity => 1);
newcommand('bigskip',
	   text => '<br />');
newcommand('cal');
newcommand('chapter',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     local $_ = shift;
	     return $self->section(undef,'chapter',$_,'');
	   });
newcommand('cite',
	   arity => '[]1',
	   text => sub
	   { my $self = shift;
	     my $add  = shift;
	     my $keys = shift;
	     my $ret  = '';
	     local $_;
	     my $bibfile = $self->opt('prefix').'&#095;bib'.$self->opt('ext');
	     foreach $_ (split /,/,$keys)
	     { $ret .= ',' if ($ret ne '');
	       $ret .= "<a href='$bibfile#$_'>";
	       if ( defined ($self->{"cite:$_"}) )
	       { $ret .= $self->{"cite:$_"}; }
	       else
	       { print STDERR "*** Missing citation `$_'\n"
		     if ( $self->{'message:p'} );
		 $ret .= '???';
	       }
	       $ret .= '</a>';
	     }
	     $ret .= ", $add" if ( defined($add) and $add ne '' );
	     return '['.$ret.']';
	   });
newcommand('documentclass',
	   arity => '[]1');
newcommand('documentstyle',
	   arity => '[]1');
newcommand('em',
	   text => sub{ return shift->in_group('<em>','</em>'); });
newcommand('emph',
	   arity => 1,
	   text => '<em>#1</em>');
newcommand('footnote',
	   arity => 1,
	   text  => sub { my ($self,$fntext) = @_;
			  return $self->footnote($fntext);
	   });
newcommand('hspace',
	   text => sub
	   { my $self = shift;
	     my $a;
	     if ( m/^\s*\*\s*/o ) { $_ = $'; }
	     ($a,$_) = get_arg('hspace',$_);
	     s/^\s//go;
	     return '';
	   });
newcommand('index',
	   arity=>'1',
	   text => sub
	   { my ($self,$key) = @_;
	     return $self->Index($key);
	   }
	  );
newcommand('item',
	   arity=>'[]0',
	   text => sub
	   { shift;
	     local $_ = shift;
	     return "<dt>$_<dd>" if defined($_);
	     return '<li>';
	   }
	  );
newcommand('label',
	   arity => 1,
	   text => sub{ return shift->label(@_,1); });
newcommand('large',
	   text => sub{ return shift->in_group('<font size="4">',
					       '</font>'); });
newcommand('ldots',
	   text => '...');
newcommand('makeatletter',
	   text => '');
newcommand('makeatother',
	   text => '');
newcommand('maketitle',
	   text => '');
newcommand('markboth',
	   arity => 2);
newcommand('markright',
	   arity => 1);
newcommand('mbox');
newcommand('medskip',
	   text => '<br />');
newcommand('newblock');
newcommand('newcommand',
	   arity => '1[]1',
	   text => sub
	   { my ($self,$name,$arity,$text) = @_;
	     $name =~ s/^\\//o;
	     return newcommand($name,'arity' => $arity,'text' => $text);
	   });
newcommand('newenvironment',
	   arity => '3',
	   text => sub
	   { my ($self,$name,$text,$endtext) = @_;
	     my $arity = 0; # TODO: Needs to be fixed.
	     $name =~ s/^\\//o;
	     newcommand("end{$name}",
			'text' => $endtext);
	     return newcommand("begin{$name}",
			       'arity' => $arity,
			       'text' => $text);
	   });
newcommand('newif',
	   arity => 1,
	   text => sub
	   { my ($self,$name) = @_;
	     $name = substr($name,1);
	     newcommand($name,text=>'');
	     $name = substr($name,2);
	     $self->{'if:'.$name} = 0;
	     newcommand($name.'true',
			text => sub{shift->{"if:$name"} = 1});
	     newcommand($name.'false',
			text => sub{shift->{"if:$name"} = 0});
	     return '';
	   });
newcommand('newpage',
	   text => '<br /><hr /><br />');
newcommand('noindent');
newcommand('normalsize',
	   text => sub{ return shift->in_group('<font size="3">',
					       '</font>'); });
newcommand('null');
newcommand('pageref',
	   arity => 1,
	   text => sub
	   { my ($self,$label) = @_;
	     if ( defined($self->{'label_url:'.$label}) )
	     { return '<a href="'.$self->{'label_url:'.$label}.
		   '">'.$self->{'label_text:'.$label}.'</a>';
	     }
	     else
	     { if ( $self->{'message:p'} )
	       { print STDERR "*** Missing label `$label'\n"; }
	       return '???';
	     }
	   });
newcommand('pagestyle');
newcommand('paragraph',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     local $_ = shift;
	     return $self->section(undef,'paragraph',$_,'');
	   });
newcommand('part',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     local $_ = shift;
	     return $self->section(undef,'part',$_,'');
	   });

newenvironment('quote',
	       text    => "\n<blockquote>\n",
	       endtext => '</blockquote>');
newenvironment('quotation',
	       text    => "\n<blockquote>\n",
	       endtext => '</blockquote>');
newcommand('ref',
	   arity => 1,
	   text => sub
	   { my ($self,$label) = @_;
	     if ( defined($self->{'label_url:'.$label}) )
	     { return '<a href="'.$self->{'label_url:'.$label}.
		      '">'.$self->{'label_text:'.$label}.'</a>';
	     }
	     else
	     { if ( $self->{'message:p'} )
	       { print STDERR "*** Missing label `$label'\n"; }
	       return '???';
	     }
	   });
newcommand('renewcommand',
	   arity => '1[]1',
	   text => sub
	   { my ($self,$name,$arity,$text) = @_;
	     $name =~ s/^\\//o;
	     return renewcommand($name,
				 'arity'   => $arity,
				 'text'    => $text,
				 'noredef' => 1);
	   });
newcommand('rule',
	   arity => 2,
	   text => '<hr />');
newcommand('sc');
newcommand('scriptsize',
	   text => sub{ return shift->in_group('<font size="-3">',
					       '</font>'); });
newcommand('section',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     return $self->section(undef,'section',$_[0],'');
	   });
newcommand('setlength',
	   arity => 2);
newcommand('sf',
	   text => sub{ return shift->in_group('<font face="sans-serif">',
					       '</font>'); });
newcommand('small',
	   text => sub{ return shift->in_group('<font size="-1">',
					       '</font>'); });
newcommand('smallskip'); # TODO
newcommand('subsection',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     local $_ = shift;
	     return $self->section(undef,'subsection',$_,'');
	   });
newcommand('subsubsection',
	   arity => 1,
	   text => sub
	   { my $self = shift;
	     local $_ = shift;
	     return $self->section(undef,'subsubsection',$_,'');
	   });
newcommand('symbol',
	   arity => 1,
	   text => sub
	   { shift;
	     local $_ = shift;
	     return $symbol{$_}; });
newcommand('tableofcontents',
	   text => sub
	   { my $self = shift;
	     return $self->section($self->opt('prefix').'_toc'.$self->opt('ext'),
				   'tableofcontents',
				   'Table of contents',
				   $self->{TOC});
	   });
newcommand('textbf',
	   arity => 1,
	   text => '<b>#1</b>');
newcommand('textit',
	   arity => 1,
	   text => '<i>#1</i>');
newcommand('textrm',
	   arity => 1,
	   text => '#1');
newcommand('textsc',
	   arity => 1,
	   text => sub
	   { my ($self,$t) = @_;
	     $t =~ s/[^A-Z]+/'<small>'.uc($&).'<\/small>'/eg;
	     return $t;
	   });
newcommand('textsf',
	   arity => 1,
	   text => '<font face="sans-serif">#1</font>');
newcommand('texttt',
	   arity => 1,
	   text => '<tt>#1</tt>');
newcommand('thispagestyle');
newcommand('tiny',
	   text => sub{ return shift->in_group('<font size="1">',
					       '</font>'); });
newcommand('title',
           arity => 1,
	   text => sub {
	     my ($self,$title) = @_;
	     newcommand('@title','text'=>$title);
	     my $t = (new L2H())->LaTeX2HTML($title);
	     $self->{'title'} = $title;
	     set_opt('title', $t) if $self->opt('title') eq '';
	     return '';
	   });
newcommand('tt',
	   text => sub { return shift->in_group('<tt>','</tt>');});
newcommand('verb',
	   text => sub {
	     s/^\s*//o;
	     my $e = index($_,substr($_,0,1),1);
	     if ( $e < 0 )
	     { $e = substr($_,0,1);
	       print STDERR "*** \\verb$e without closing `$e'\n";
	     }
	     else
	     { my $v = substr($_,1,$e-1);
	       $_ = substr($_,$e+1);
	       $v =~ s/\&/\&amp;/go;
	       $v =~ s/"/\&quot;/go;#"
	       $v =~ s/\$/\&\#036;/go;
	       $v =~ s/%/\&\#037;/go;
	       $v =~ s/\\/\&\#092;/go;
	       $v =~ s/[\\^]/\&\#094;/go;
	       $v =~ s/_/\&\#095;/go;
	       $v =~ s/\{/\&\#123;/go;
	       $v =~ s/\}/\&\#125;/go;
	       return "<code>$v</code>";
	     }
	     return '';
	   });
newcommand('begin{verbatim}',
	   text => sub {
	     my $e = index($_,'\\end{verbatim}');
	     if ( $e < 0 )
	     { print STDERR "*** \\begin{verbatim} without matching end\n"; }
	     else
	     { my $v = substr($_,1,$e-1);
	       $_ = substr($_,$e+14);
	       $v =~ s/\&/\&amp;/go;
	       $v =~ s/"/\&quot;/go;#"
	       $v =~ s/\\$/\&\#036;/go;
	       $v =~ s/%/\&\#037;/go;
	       $v =~ s/\\/\&\#092;/go;
	       $v =~ s/[\\^]/\&\#094;/go;
	       $v =~ s/_/\&\#095;/go;
	       $v =~ s/\{/\&\#123;/go;
	       $v =~ s/\}/\&\#125;/go;
	       return "<pre>$v</pre>";
	     }
	     return '';
	   });

newenvironment('center',
	       text    => '<center>',
	       endtext => '</center>');
newenvironment('description',
	       text    => '<dl>',
	       endtext => '</dl>');
newenvironment('document',
	       text    => sub {my $self = shift;
			       $self->{'ignore:p'} = 0;
			       return '';},
	       endtext => sub {shift->{'ignore:p'} = 1; return '';});
newenvironment('enumerate',
	       text    => '<ol>',
	       endtext => '</ol>');
newenvironment('itemize',
	       text    => '<ul>',
	       endtext => '</ul>');
newenvironment('list',
	       arity   => 2,
	       text    => '<ul>',
	       endtext => '</ul>');
newenvironment('tabular',
	       arity   => 1,
	       text    => sub {shift->push_context('tabular');
			       return '<table><tr><td>';  },
	       endtext => sub { shift->pop_context;
				return '</td></tr></table>'; }
	       );
newenvironment('tabular*',
	       arity   => 1,
	       text    => sub { shift->push_context('tabular');
				return '<table><tr><td>'; },
	       endtext => sub { shift->pop_context;
				return '</td></tr></table>';}
	       );
newcommand('begin{thebibliography}',
	       arity   => 1,
	       text    =>  sub
	       { my $self = shift;
		 m/\\end{thebibliography}/o;
		 my $bib = $`;
		 $_ = $';
		 my $trans = new L2H();
		 $self->{'BIB'} = "\n<dl>\n".$trans->LaTeX2HTML($bib)."\n</dl>\n";
		 my %hash = %$trans;
		 while ( my ($key,$value) = each %hash )
		 { $self->{$key} = $value if $key =~ m/^cite:/o;
		 }
		 return '';
	       },
    );
newcommand('nocite',
	   arity   => 1);

newcommand('textregistered',
	   text   => '®');

1;
#------------------------------------------------------------------------------
# Local Variables: 
# mode: perl
# End: 
